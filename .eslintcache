[{"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\index.js":"1","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\index.js":"2","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\style.js":"3","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\index.js":"4","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\index.js":"5","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\style.js":"6","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\generateCrossWord2.js":"7","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\index.js":"8","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\style.js":"9","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\index.js":"10","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\style.js":"11","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Homepage\\index.js":"12","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Homepage\\style.js":"13","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Settings\\index.js":"14","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Settings\\style.js":"15","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\HamMenu\\index.js":"16","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\HamMenu\\style.js":"17"},{"size":228,"mtime":1610478441857,"results":"18","hashOfConfig":"19"},{"size":3889,"mtime":1612470581026,"results":"20","hashOfConfig":"19"},{"size":3444,"mtime":1612460089226,"results":"21","hashOfConfig":"19"},{"size":6637,"mtime":1612227341780,"results":"22","hashOfConfig":"19"},{"size":6443,"mtime":1612479854343,"results":"23","hashOfConfig":"19"},{"size":4776,"mtime":1612480303519,"results":"24","hashOfConfig":"19"},{"size":7826,"mtime":1610492691355,"results":"25","hashOfConfig":"19"},{"size":8160,"mtime":1612470273488,"results":"26","hashOfConfig":"19"},{"size":5365,"mtime":1612470881018,"results":"27","hashOfConfig":"19"},{"size":4469,"mtime":1612480892500,"results":"28","hashOfConfig":"19"},{"size":4457,"mtime":1612481124281,"results":"29","hashOfConfig":"19"},{"size":677,"mtime":1612149592673,"results":"30","hashOfConfig":"19"},{"size":1069,"mtime":1612400135936,"results":"31","hashOfConfig":"19"},{"size":2678,"mtime":1612460647159,"results":"32","hashOfConfig":"19"},{"size":3827,"mtime":1612400299147,"results":"33","hashOfConfig":"19"},{"size":1053,"mtime":1612398451893,"results":"34","hashOfConfig":"19"},{"size":1297,"mtime":1612399383690,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"140oa9c",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\index.js",[],["72","73"],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\generateCrossWord2.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\index.js",["74"],"import React from 'react';\r\nimport update from 'immutability-helper';\r\n\r\nimport { CgClose } from 'react-icons/cg';\r\nimport { MdEdit } from 'react-icons/md';\r\nimport { BiMove } from 'react-icons/bi';\r\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io';\r\n\r\nimport {\r\n    DashboardContainer\r\n} from './style';\r\n\r\nimport { AppContext } from '../../Contexts/AppContext';\r\n\r\nconst CURRENT_NAMES_STORAGE_KEY = \"currentnames\";\r\nconst NAME_MODE_STORAGE_KEY = \"nameMode\";\r\n\r\nconst Dashboard = () => {\r\n    const {\r\n        names, setNames, generateGraph\r\n     } = React.useContext(AppContext);\r\n\r\n    const [ currentNames, setCurrentNames ] = React.useState([]);\r\n    const [ nameMode, setNameMode ] = React.useState({});\r\n    const [ showDashboard, setShowDashboard ] = React.useState(true);\r\n\r\n    const nameRef = React.useRef();\r\n    \r\n    React.useEffect(() => {\r\n        const currentNamesItem = localStorage.getItem(CURRENT_NAMES_STORAGE_KEY);\r\n        const nameModeItem = localStorage.getItem(NAME_MODE_STORAGE_KEY);\r\n\r\n        setCurrentNames(JSON.parse(currentNamesItem) ?? []);\r\n        setNameMode(JSON.parse(nameModeItem) ?? {\r\n            id: -1,\r\n            mode: \"close\"\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem(CURRENT_NAMES_STORAGE_KEY, JSON.stringify(currentNames));\r\n    }, [currentNames]);\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem(NAME_MODE_STORAGE_KEY, JSON.stringify(nameMode));\r\n    }, [nameMode]);\r\n\r\n    const onKeyDown = (e) => {\r\n        if (e.key !== \" \" && e.key !== \"Enter\")\r\n            return;\r\n        const trimmed = nameRef.current.value.trim();\r\n        nameRef.current.value = \"\";\r\n        e.preventDefault();\r\n\r\n        if (trimmed.length === 0)\r\n            return;\r\n        setCurrentNames(prev => [...prev, trimmed.toUpperCase()]);\r\n    }\r\n\r\n    let cancelClick = false;\r\n    const applyIcon = (id) => {\r\n        if (nameMode.id === id && nameMode.mode === \"edit\") {\r\n            setCurrentNames(prev => update(prev, {\r\n                    [id]: {\r\n                        $set: nameRef.current.value\r\n                    }\r\n                })\r\n            );\r\n            setNameMode({ id: -1 });\r\n        }\r\n        else {\r\n            setCurrentNames(prev => {\r\n                const copy = [...prev];\r\n                copy.splice(id, 1);\r\n                return copy;   \r\n            });\r\n            setNameMode({ id: -1 });\r\n            cancelClick = true;\r\n        }\r\n    }\r\n\r\n    const onDoubleClick = (id) => {\r\n        if (nameMode.id === id && nameMode.mode === \"edit\") {\r\n            nameRef.current.value = \"\";\r\n            setNameMode({ id: -1 });\r\n        }\r\n        else {\r\n            nameRef.current.value = currentNames[id].toLowerCase();\r\n            setNameMode({\r\n                id: id,\r\n                mode: \"edit\"\r\n            });\r\n        }\r\n    }\r\n\r\n    const onClick = (id) => {\r\n        if (cancelClick) {\r\n            cancelClick = false;\r\n            return;\r\n        }\r\n    \r\n        if (nameMode.id === id && (nameMode.mode === \"move\" || nameMode.mode === \"remove\"))\r\n            setNameMode({ id: -1 });\r\n        else if (nameMode.id === -1) {\r\n            setNameMode({\r\n                id: id,\r\n                mode: \"move\"\r\n            });\r\n        }\r\n        else if (nameMode.mode === \"move\") {\r\n            setCurrentNames(prev => {\r\n                const copy = [...prev];\r\n                copy.splice(nameMode.id, 1);\r\n                copy.splice(id, 0, prev[nameMode.id]);\r\n                return copy;\r\n            });\r\n            setNameMode({ id: -1 });\r\n        }\r\n    }\r\n\r\n    const onDrop = (event, where, target) => {\r\n        const id = event.dataTransfer.getData(\"nameid\");\r\n\r\n        if (where === \"input\") {\r\n            nameRef.current.value = currentNames[id].toLowerCase();\r\n            nameRef.current.focus();\r\n        }\r\n        else if (where === \"name\" && id !== target) {\r\n            setCurrentNames(prev => {\r\n                const copy = [...prev];\r\n                copy.splice(id, 1);\r\n                copy.splice(target, 0, prev[id]);\r\n                return copy;\r\n            });\r\n        }\r\n    }\r\n\r\n    const onDragStart = (event, id) => {\r\n        event.dataTransfer.setData(\"nameid\", id);\r\n    }\r\n\r\n    const onDragOver = (event) => event.preventDefault();\r\n\r\n    const randomOrder = () => {\r\n        const copy = [...currentNames];\r\n\r\n        for (let i = 0; i < copy.length; ++i) {\r\n            const randomIndex = Math.floor(Math.random() * copy.length);\r\n            const tmp = copy[randomIndex];\r\n\r\n            copy[randomIndex] = copy[i];\r\n            copy[i] = tmp;\r\n        }\r\n        setCurrentNames(copy);\r\n        setNameMode({ id: -1 });\r\n    }\r\n\r\n    const clearNames = () => {\r\n        setCurrentNames([]);\r\n        setNameMode({ id: -1 });\r\n    }\r\n\r\n    const startGeneration = () => {\r\n        setNames(prev => currentNames);\r\n        generateGraph(currentNames, 0);\r\n    }\r\n\r\n    return (\r\n        <DashboardContainer showDashboard={showDashboard}>\r\n            <div className=\"hide-container\" onClick={() => setShowDashboard(!showDashboard)}>\r\n                <p>{ showDashboard ? \"Hide\" : \"Show\" } dashboard</p>\r\n                { showDashboard ? <IoIosArrowDown /> : <IoIosArrowUp /> }\r\n            </div>\r\n            <div className=\"inputs\">\r\n                <div className=\"fields\">\r\n                    <input\r\n                        ref={nameRef}\r\n                        className=\"name-input\"\r\n                        onKeyDown={onKeyDown}\r\n                        onDrop={(event) => onDrop(event, \"input\")}\r\n                        onDragOver={onDragOver}\r\n                        placeholder=\"Enter a word...\"\r\n                    />\r\n                    <div className=\"names-container\">\r\n                        <div className=\"names\">\r\n                            { currentNames.length\r\n                                ? currentNames.map((name, id) => {\r\n                                    let NameIcon = CgClose;\r\n                                    if (nameMode.id === id) {\r\n                                        if (nameMode.mode === \"edit\")\r\n                                            NameIcon = MdEdit;\r\n                                        else if (nameMode.mode === \"move\")\r\n                                            NameIcon = BiMove;\r\n                                    }\r\n\r\n                                    return (\r\n                                        <div\r\n                                            key={id}\r\n                                            className={`one-name one-name-around ${id === nameMode.id && `one-name-mode`}`}\r\n                                            onDragStart={(event) => onDragStart(event, id)}\r\n                                            onDrop={(event) => onDrop(event, \"name\", id)}\r\n                                            onDragOver={onDragOver}\r\n                                            onDoubleClick={() => onDoubleClick(id)}\r\n                                            onClick={() => onClick(id)}\r\n                                            draggable\r\n                                        >\r\n                                            <p>{name.toLowerCase()}</p>\r\n                                            <NameIcon className=\"close-icon\" onClick={() => applyIcon(id)} />\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                                : <p className=\"one-name-around no-name\">There are no names. Add names by using the text field above.</p>\r\n                            }\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <p onClick={randomOrder}>Randomize</p>\r\n                            <p onClick={clearNames}>Clear All</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"generate-button\" onClick={startGeneration}>Generate</button>\r\n            </div>\r\n        </DashboardContainer>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Homepage\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Homepage\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Settings\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Settings\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\HamMenu\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\HamMenu\\style.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":20,"column":9,"nodeType":"81","messageId":"82","endLine":20,"endColumn":14},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'names' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]