[{"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\index.js":"1","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\index.js":"2","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\style.js":"3","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\index.js":"4","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\index.js":"5","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\style.js":"6","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\generateCrossWord2.js":"7","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\index.js":"8","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\style.js":"9","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\index.js":"10","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\style.js":"11"},{"size":228,"mtime":1610478441857,"results":"12","hashOfConfig":"13"},{"size":2061,"mtime":1612050056663,"results":"14","hashOfConfig":"13"},{"size":2082,"mtime":1612053211466,"results":"15","hashOfConfig":"13"},{"size":6624,"mtime":1612137934263,"results":"16","hashOfConfig":"13"},{"size":3861,"mtime":1612139476431,"results":"17","hashOfConfig":"13"},{"size":3971,"mtime":1612060041835,"results":"18","hashOfConfig":"13"},{"size":7826,"mtime":1610492691355,"results":"19","hashOfConfig":"13"},{"size":5245,"mtime":1612055395832,"results":"20","hashOfConfig":"13"},{"size":4191,"mtime":1612012360629,"results":"21","hashOfConfig":"13"},{"size":4364,"mtime":1612139763586,"results":"22","hashOfConfig":"13"},{"size":4075,"mtime":1612138338132,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"vf6y51",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\index.js",[],["48","49"],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\App\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\GraphOutput\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Contexts\\AppContext\\generateCrossWord2.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\index.js",["50","51","52"],"import React from 'react';\r\n\r\nimport { CgClose } from 'react-icons/cg';\r\n\r\nimport {\r\n    DashboardContainer\r\n} from './style';\r\n\r\nimport { AppContext } from '../../Contexts/AppContext';\r\n\r\nconst CURRENT_NAMES_STORAGE_KEY = \"currentnames\";\r\n\r\nconst Dashboard = () => {\r\n    const {\r\n        names, setNames, generateGraph\r\n     } = React.useContext(AppContext);\r\n\r\n    const [ currentNames, setCurrentNames ] = React.useState([]);\r\n    const [ sendNames, setSendNames ] = React.useState(false);\r\n\r\n    const nameRef = React.useRef();\r\n    \r\n    React.useEffect(() => {\r\n        const currentNamesItem = localStorage.getItem(CURRENT_NAMES_STORAGE_KEY);\r\n\r\n        setCurrentNames(JSON.parse(currentNamesItem) ?? []);\r\n    }, []);\r\n\r\n    // React.useEffect(() => {\r\n    //     generateGraph(0);\r\n    // }, [names]);\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem(CURRENT_NAMES_STORAGE_KEY, JSON.stringify(currentNames));\r\n    }, [currentNames]);\r\n\r\n    const onKeyDown = (e) => {\r\n        if (e.key !== \" \" && e.key !== \"Enter\")\r\n            return;\r\n        const trimmed = nameRef.current.value.trim();\r\n        nameRef.current.value = \"\";\r\n        e.preventDefault();\r\n\r\n        if (trimmed.length === 0)\r\n            return;\r\n        setCurrentNames(prev => [...prev, trimmed.toUpperCase()]);\r\n    }\r\n\r\n    const removeName = (id) => {\r\n        setCurrentNames(prev => {\r\n            const copy = [...prev];\r\n            copy.splice(id, 1);\r\n            return copy;   \r\n        });\r\n    }\r\n\r\n    const onDrop = (event, where, target) => {\r\n        const id = event.dataTransfer.getData(\"nameid\");\r\n\r\n        if (where === \"input\") {\r\n            nameRef.current.value = currentNames[id].toLowerCase();\r\n            nameRef.current.focus();\r\n        }\r\n        else if (where === \"name\" && id !== target) {\r\n            setCurrentNames(prev => {\r\n                const copy = [...prev];\r\n                copy.splice(id, 1);\r\n                copy.splice(target, 0, prev[id]);\r\n                return copy;\r\n            });\r\n        }\r\n    }\r\n\r\n    const onDragStart = (event, id) => {\r\n        event.dataTransfer.setData(\"nameid\", id);\r\n    }\r\n\r\n    const onDragOver = (event) => event.preventDefault();\r\n\r\n    const randomOrder = () => {\r\n        const copy = [...currentNames];\r\n\r\n        for (let i = 0; i < copy.length; ++i) {\r\n            const randomIndex = Math.floor(Math.random() * copy.length);\r\n            const tmp = copy[randomIndex];\r\n\r\n            copy[randomIndex] = copy[i];\r\n            copy[i] = tmp;\r\n        }\r\n        setCurrentNames(copy);\r\n    }\r\n\r\n    const startGeneration = () => {\r\n        setNames(prev => currentNames);\r\n        generateGraph(currentNames, 0);\r\n    }\r\n\r\n    return (\r\n        <DashboardContainer>\r\n            <div className=\"inputs\">\r\n                <div className=\"fields\">\r\n                    <input\r\n                        ref={nameRef}\r\n                        className=\"name-input\"\r\n                        onKeyDown={onKeyDown}\r\n                        onDrop={(event) => onDrop(event, \"input\")}\r\n                        onDragOver={onDragOver}\r\n                        placeholder=\"Enter a word...\"\r\n                    />\r\n                    <div className=\"names-container\">\r\n                        <div className=\"names\">\r\n                            { currentNames.length\r\n                                ? currentNames.map((name, id) => (\r\n                                    <div\r\n                                        key={id} className=\"one-name one-name-around\"\r\n                                        onDragStart={(event) => onDragStart(event, id)}\r\n                                        onDrop={(event) => onDrop(event, \"name\", id)}\r\n                                        onDragOver={onDragOver}\r\n                                        draggable\r\n                                    >\r\n                                        <p>{name.toLowerCase()}</p>\r\n                                        <CgClose className=\"close-icon\" onClick={() => removeName(id)} />\r\n                                    </div>\r\n                                ))\r\n                                : <p className=\"one-name-around no-name\">There are no names. Add names by using the text field above.</p>\r\n                            }\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <p onClick={randomOrder}>Randomize</p>\r\n                            <p onClick={() => setCurrentNames([])}>Clear All</p>\r\n                            {/* <div className=\"icons\">\r\n                                <div className=\"random-icon\" onClick={randomOrder}>\r\n                                    <VscDebugRestart />\r\n                                    <BiDice5 />\r\n                                </div>\r\n                                <HiTrash className=\"trash-icon\" onClick={() => { setCurrentNames([]) }} />\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button className=\"generate-button\" onClick={startGeneration}>Generate</button>\r\n            </div>\r\n        </DashboardContainer>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Dashboard\\style.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\index.js",[],"D:\\Desktop\\Projects\\nodejs\\beaublaze\\src\\Components\\Bookmarks\\style.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":15,"column":9,"nodeType":"59","messageId":"60","endLine":15,"endColumn":14},{"ruleId":"57","severity":1,"message":"61","line":19,"column":13,"nodeType":"59","messageId":"60","endLine":19,"endColumn":22},{"ruleId":"57","severity":1,"message":"62","line":19,"column":24,"nodeType":"59","messageId":"60","endLine":19,"endColumn":36},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'names' is assigned a value but never used.","Identifier","unusedVar","'sendNames' is assigned a value but never used.","'setSendNames' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]